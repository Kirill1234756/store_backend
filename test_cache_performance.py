#!/usr/bin/env python
import os
import sys
import django
import time
import requests
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.development')
django.setup()

from products.cache_service import CacheService
from products.models import Product
from django.core.cache import cache

def test_cache_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –≤ –∫—ç—à
    print("\nüìù –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –≤ –∫—ç—à")
    write_times = []
    for i in range(100):
        key = f'test_key_{i}'
        value = f'test_value_{i}'
        start = time.time()
        cache.set(key, value, timeout=60)
        write_times.append(time.time() - start)
    
    avg_write_time = sum(write_times) / len(write_times)
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {avg_write_time * 1000:.2f}ms")
    
    # –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
    print("\nüìñ –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞")
    read_times = []
    for i in range(100):
        key = f'test_key_{i}'
        start = time.time()
        cache.get(key)
        read_times.append(time.time() - start)
    
    avg_read_time = sum(read_times) / len(read_times)
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {avg_read_time * 1000:.2f}ms")
    
    # –¢–µ—Å—Ç 3: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    print("\nüì¶ –¢–µ—Å—Ç 3: –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    data = {f'bulk_key_{i}': f'bulk_value_{i}' for i in range(50)}
    
    start = time.time()
    cache.set_many(data, timeout=60)
    bulk_write_time = time.time() - start
    
    start = time.time()
    cache.get_many(data.keys())
    bulk_read_time = time.time() - start
    
    print(f"–í—Ä–µ–º—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ (50 –∫–ª—é—á–µ–π): {bulk_write_time * 1000:.2f}ms")
    print(f"–í—Ä–µ–º—è –º–∞—Å—Å–æ–≤–æ–≥–æ —á—Ç–µ–Ω–∏—è (50 –∫–ª—é—á–µ–π): {bulk_read_time * 1000:.2f}ms")
    
    # –¢–µ—Å—Ç 4: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    print("\nüõçÔ∏è –¢–µ—Å—Ç 4: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –ë–î
    start = time.time()
    products = list(Product.objects.filter(is_active=True)[:10])
    db_time = time.time() - start
    
    # –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã (—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON)
    from products.serializers import ProductSerializer
    start = time.time()
    for product in products:
        cache_key = CacheService.get_cache_key('products', product.id)
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ JSON
        serializer = ProductSerializer(product)
        cache.set(cache_key, serializer.data, CacheService.get_cache_timeout('products'))
    cache_write_time = time.time() - start
    
    # –ß–∏—Ç–∞–µ–º –∏–∑ –∫—ç—à–∞
    start = time.time()
    cached_products = []
    for product in products:
        cache_key = CacheService.get_cache_key('products', product.id)
        cached_product = cache.get(cache_key)
        if cached_product:
            cached_products.append(cached_product)
    cache_read_time = time.time() - start
    
    print(f"–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î: {db_time * 1000:.2f}ms")
    print(f"–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à: {cache_write_time * 1000:.2f}ms")
    print(f"–í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞: {cache_read_time * 1000:.2f}ms")
    print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è: {db_time / cache_read_time:.1f}x")
    
    # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
    print("\nüìä –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞")
    stats = CacheService.get_cache_stats()
    for key, value in stats.items():
        print(f"{key}: {value}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    for i in range(100):
        cache.delete(f'test_key_{i}')
    for key in data.keys():
        cache.delete(key)
    for product in products:
        cache_key = CacheService.get_cache_key('products', product.id)
        cache.delete(cache_key)
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_api_caching():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è API")
    print("=" * 40)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Django —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç API –±–µ–∑ –∫—ç—à–∞
    print("\nüìù –¢–µ—Å—Ç API –±–µ–∑ –∫—ç—à–∞:")
    start = time.time()
    try:
        response = requests.get(f"{base_url}/api/products/", timeout=10)
        no_cache_time = time.time() - start
        print(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {no_cache_time * 1000:.2f}ms")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return
    
    # –¢–µ—Å—Ç API —Å –∫—ç—à–µ–º (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
    print("\nüìñ –¢–µ—Å—Ç API —Å –∫—ç—à–µ–º:")
    start = time.time()
    try:
        response = requests.get(f"{base_url}/api/products/", timeout=10)
        cache_time = time.time() - start
        print(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {cache_time * 1000:.2f}ms")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if no_cache_time > 0:
            speedup = no_cache_time / cache_time
            print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_cache_performance()
    test_api_caching() 