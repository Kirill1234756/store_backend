from django.core.management.base import BaseCommand, CommandError
from django.core.cache import cache
from products.cache_service import CacheService
import time
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º Redis'

    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            choices=['clear', 'warm', 'stats', 'info', 'monitor'],
            help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        )
        parser.add_argument(
            '--prefix',
            type=str,
            help='–ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞'
        )
        parser.add_argument(
            '--timeout',
            type=int,
            default=300,
            help='–¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)'
        )

    def handle(self, *args, **options):
        action = options['action']
        prefix = options.get('prefix')
        timeout = options.get('timeout')

        if action == 'clear':
            self.clear_cache(prefix)
        elif action == 'warm':
            self.warm_cache()
        elif action == 'stats':
            self.show_stats()
        elif action == 'info':
            self.show_info()
        elif action == 'monitor':
            self.monitor_cache(timeout)

    def clear_cache(self, prefix=None):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        try:
            if prefix:
                # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É
                CacheService.clear_cache_by_prefix(prefix)
                self.stdout.write(
                    self.style.SUCCESS(f'–ö—ç—à —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "{prefix}" –æ—á–∏—â–µ–Ω')
                )
            else:
                # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
                cache.clear()
                self.stdout.write(
                    self.style.SUCCESS('–í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω')
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}')
            )

    def warm_cache(self):
        """–ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞"""
        try:
            self.stdout.write('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞...')
            start_time = time.time()
            
            CacheService.warm_cache()
            
            duration = time.time() - start_time
            self.stdout.write(
                self.style.SUCCESS(f'–ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞: {e}')
            )

    def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        try:
            stats = CacheService.get_cache_stats()
            
            self.stdout.write('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:')
            self.stdout.write('=' * 40)
            
            for key, value in stats.items():
                self.stdout.write(f'{key}: {value}')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
            )

    def show_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis"""
        try:
            redis_info = cache.client.info()
            
            self.stdout.write('üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Redis:')
            self.stdout.write('=' * 40)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            self.stdout.write(f'–í–µ—Ä—Å–∏—è Redis: {redis_info.get("redis_version", "N/A")}')
            self.stdout.write(f'–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {redis_info.get("used_memory_human", "N/A")}')
            self.stdout.write(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {redis_info.get("maxmemory_human", "N/A")}')
            self.stdout.write(f'–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {redis_info.get("connected_clients", 0)}')
            self.stdout.write(f'–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {redis_info.get("total_commands_processed", 0)}')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª—é—á–µ–π
            self.stdout.write(f'–ü–æ–ø–∞–¥–∞–Ω–∏—è –≤ –∫—ç—à: {redis_info.get("keyspace_hits", 0)}')
            self.stdout.write(f'–ü—Ä–æ–º–∞—Ö–∏ –∫—ç—à–∞: {redis_info.get("keyspace_misses", 0)}')
            
            # –í—ã—á–∏—Å–ª—è–µ–º hit rate
            hits = redis_info.get("keyspace_hits", 0)
            misses = redis_info.get("keyspace_misses", 0)
            total = hits + misses
            
            if total > 0:
                hit_rate = (hits / total) * 100
                self.stdout.write(f'Hit Rate: {hit_rate:.2f}%')
            else:
                self.stdout.write('Hit Rate: 0%')
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}')
            )

    def monitor_cache(self, timeout):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—ç—à–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            self.stdout.write(f'üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—ç—à–∞ (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å)...')
            self.stdout.write('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏')
            
            start_time = time.time()
            initial_stats = cache.client.info()
            
            while time.time() - start_time < timeout:
                current_stats = cache.client.info()
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                commands_diff = current_stats.get('total_commands_processed', 0) - initial_stats.get('total_commands_processed', 0)
                hits_diff = current_stats.get('keyspace_hits', 0) - initial_stats.get('keyspace_hits', 0)
                misses_diff = current_stats.get('keyspace_misses', 0) - initial_stats.get('keyspace_misses', 0)
                
                # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (–¥–ª—è Unix-—Å–∏—Å—Ç–µ–º)
                self.stdout.write('\033[2J\033[H')
                
                self.stdout.write('üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—ç—à–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')
                self.stdout.write('=' * 50)
                self.stdout.write(f'–í—Ä–µ–º—è: {time.strftime("%H:%M:%S")}')
                self.stdout.write(f'–ö–æ–º–∞–Ω–¥/—Å–µ–∫: {commands_diff}')
                self.stdout.write(f'Hits/—Å–µ–∫: {hits_diff}')
                self.stdout.write(f'Misses/—Å–µ–∫: {misses_diff}')
                
                if hits_diff + misses_diff > 0:
                    current_hit_rate = (hits_diff / (hits_diff + misses_diff)) * 100
                    self.stdout.write(f'–¢–µ–∫—É—â–∏–π Hit Rate: {current_hit_rate:.2f}%')
                
                self.stdout.write(f'–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {current_stats.get("used_memory_human", "N/A")}')
                
                time.sleep(1)
                initial_stats = current_stats
                
        except KeyboardInterrupt:
            self.stdout.write('\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}')
            ) 