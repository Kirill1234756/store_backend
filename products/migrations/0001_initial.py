# Generated by Django 4.2.7 on 2025-04-29 22:12

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MediaImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='media/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_index=True, max_length=200, validators=[django.core.validators.RegexValidator(code='invalid_title', message='Название может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Z0-9\\s\\-_.,!?()]+$')], verbose_name='Название')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField(validators=[django.core.validators.RegexValidator(code='invalid_description', message='Описание может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()<>]+$')], verbose_name='Описание')),
                ('price', models.DecimalField(db_index=True, decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'), message='Цена должна быть больше нуля')], verbose_name='Цена')),
                ('condition', models.CharField(choices=[('A', 'Как новый'), ('B', 'Хорошее'), ('C', 'Удовлетворительное')], db_index=True, max_length=20, verbose_name='Состояние')),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('phone_model', models.CharField(default='Не указана', max_length=100, validators=[django.core.validators.RegexValidator(code='invalid_phone_model', message='Модель телефона может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Модель телефона')),
                ('color', models.CharField(choices=[('black', 'Чёрный'), ('white', 'Белый'), ('gold', 'Золотой'), ('silver', 'Серебристый'), ('blue', 'Синий'), ('red', 'Красный'), ('green', 'Зелёный'), ('other', 'Другой')], default='black', max_length=50, verbose_name='Цвет')),
                ('storage', models.CharField(default='Не указана', max_length=50, validators=[django.core.validators.RegexValidator(code='invalid_storage', message='Память может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Память')),
                ('screen_size', models.DecimalField(decimal_places=1, default=Decimal('6.1'), max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('1.0'), message='Диагональ экрана должна быть больше 1 дюйма'), django.core.validators.MaxValueValidator(Decimal('20.0'), message='Диагональ экрана должна быть меньше 20 дюймов')], verbose_name='Диагональ экрана (дюймы)')),
                ('screen_condition', models.CharField(blank=True, default='Хорошее', max_length=50, validators=[django.core.validators.RegexValidator(code='invalid_screen_condition', message='Состояние экрана может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Состояние экрана')),
                ('body_condition', models.CharField(blank=True, default='Хорошее', max_length=50, validators=[django.core.validators.RegexValidator(code='invalid_body_condition', message='Состояние корпуса может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Состояние корпуса')),
                ('battery_health', models.IntegerField(default=80, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Здоровье аккумулятора (%)')),
                ('includes', models.TextField(blank=True, default='Телефон, зарядное устройство', validators=[django.core.validators.RegexValidator(code='invalid_includes', message='Комплектация может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Комплектация')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='products/')),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Рейтинг')),
                ('additional_images', models.ManyToManyField(blank=True, related_name='products', to='products.mediaimage')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to='products.category', verbose_name='Категория')),
                ('seller', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL, verbose_name='Продавец')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name', 'slug'], name='products_ca_name_603dc0_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['product', 'created_at'], name='products_re_product_0fc5ab_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['user', 'created_at'], name='products_re_user_id_16fa90_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['-created_at'], name='product_recent_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['price'], name='product_price_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['created_at'], name='product_created_at_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['condition'], name='product_condition_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['storage'], name='product_storage_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['phone_model'], name='product_phone_model_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['rating'], name='product_rating_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['title', 'price'], name='product_title_price_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['created_at', 'price'], name='product_created_price_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['title', 'description'], name='product_search_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['battery_health'], name='product_battery_health_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['title', 'price'], name='products_pr_title_d07062_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'condition'], name='products_pr_categor_47de18_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['created_at', 'is_active'], name='products_pr_created_a63638_idx'),
        ),
    ]
