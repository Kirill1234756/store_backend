# Generated by Django 5.0.4 on 2025-04-10 21:38

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, validators=[django.core.validators.RegexValidator(code='invalid_title', message='Название может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Название')),
                ('description', models.TextField(validators=[django.core.validators.RegexValidator(code='invalid_description', message='Описание может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()<>]+$')], verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01, message='Цена должна быть больше нуля')], verbose_name='Цена')),
                ('condition', models.CharField(choices=[('A', 'Как новый'), ('B', 'Хорошее'), ('C', 'Удовлетворительное')], max_length=50, verbose_name='Состояние')),
                ('phone_model', models.CharField(default='Не указана', max_length=100, validators=[django.core.validators.RegexValidator(code='invalid_phone_model', message='Модель телефона может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Модель телефона')),
                ('color', models.CharField(choices=[('black', 'Чёрный'), ('white', 'Белый'), ('gold', 'Золотой'), ('silver', 'Серебристый'), ('blue', 'Синий'), ('red', 'Красный'), ('green', 'Зелёный'), ('other', 'Другой')], default='black', max_length=50, verbose_name='Цвет')),
                ('storage', models.CharField(default='Не указана', max_length=50, validators=[django.core.validators.RegexValidator(code='invalid_storage', message='Память может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Память')),
                ('screen_size', models.DecimalField(decimal_places=1, default=6.1, max_digits=4, validators=[django.core.validators.MinValueValidator(1.0, message='Диагональ экрана должна быть больше 1 дюйма'), django.core.validators.MaxValueValidator(20.0, message='Диагональ экрана должна быть меньше 20 дюймов')], verbose_name='Диагональ экрана (дюймы)')),
                ('screen_condition', models.CharField(blank=True, default='Хорошее', max_length=50, validators=[django.core.validators.RegexValidator(code='invalid_screen_condition', message='Состояние экрана может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Состояние экрана')),
                ('body_condition', models.CharField(blank=True, default='Хорошее', max_length=50, validators=[django.core.validators.RegexValidator(code='invalid_body_condition', message='Состояние корпуса может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Состояние корпуса')),
                ('battery_health', models.IntegerField(default=80, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Здоровье аккумулятора (%)')),
                ('includes', models.TextField(blank=True, default='Телефон, зарядное устройство', validators=[django.core.validators.RegexValidator(code='invalid_includes', message='Комплектация может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Комплектация')),
                ('seller_phone', models.CharField(default='', max_length=20, validators=[django.core.validators.RegexValidator(code='invalid_phone', message='Телефон может содержать только цифры, пробелы, дефисы и скобки', regex='^[0-9+\\s\\-()]+$')], verbose_name='Телефон продавца')),
                ('seller_address', models.TextField(blank=True, default='Не указан', validators=[django.core.validators.RegexValidator(code='invalid_address', message='Адрес может содержать только буквы, цифры и специальные символы', regex='^[a-zA-Zа-яА-Я0-9\\s\\-_.,!?()]+$')], verbose_name='Адрес продавца')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('main_image', models.ImageField(default='products/default.jpg', upload_to='products/', verbose_name='Главное изображение')),
                ('image_2', models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='Доп. изображение 1')),
                ('image_3', models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='Доп. изображение 2')),
                ('image_4', models.ImageField(blank=True, null=True, upload_to='products/', verbose_name='Доп. изображение 3')),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0.0, message='Рейтинг не может быть отрицательным'), django.core.validators.MaxValueValidator(5.0, message='Рейтинг не может быть больше 5')], verbose_name='Рейтинг')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'indexes': [models.Index(fields=['-created_at'], name='recent_idx'), models.Index(fields=['price'], name='products_pr_price_9b1a5f_idx'), models.Index(fields=['created_at'], name='products_pr_created_52f0d7_idx'), models.Index(fields=['condition'], name='products_pr_conditi_a55578_idx'), models.Index(fields=['storage'], name='products_pr_storage_4b7a54_idx'), models.Index(fields=['phone_model'], name='products_pr_phone_m_48f20e_idx'), models.Index(fields=['rating'], name='products_pr_rating_c3ba71_idx')],
            },
        ),
    ]
