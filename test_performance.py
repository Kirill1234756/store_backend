#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Elasticsearch vs PostgreSQL
"""

import os
import sys
import time
import requests
import django
from django.conf import settings

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from products.models import Product
from django.db import connection
from django.test import Client

def test_postgresql_search(query, filters=None):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ PostgreSQL"""
    start_time = time.time()
    
    queryset = Product.objects.filter(is_active=True)
    
    if query:
        from django.db.models import Q
        queryset = queryset.filter(
            Q(title__icontains=query) | 
            Q(description__icontains=query) | 
            Q(phone_model__icontains=query)
        )
    
    if filters:
        if 'priceRange' in filters:
            min_price, max_price = map(float, filters['priceRange'].split(','))
            queryset = queryset.filter(price__gte=min_price, price__lte=max_price)
        
        if 'condition' in filters:
            queryset = queryset.filter(condition=filters['condition'])
    
    results = list(queryset[:20])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    end_time = time.time()
    
    return {
        'time': (end_time - start_time) * 1000,  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        'count': len(results),
        'engine': 'postgresql'
    }

def test_elasticsearch_search(query, filters=None):
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Elasticsearch API"""
    start_time = time.time()
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        url = 'http://localhost:8000/api/products/'
        params = {}
        
        if query:
            params['search'] = query
        
        if filters:
            for key, value in filters.items():
                params[key] = value
        
        response = requests.get(url, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            end_time = time.time()
            
            return {
                'time': (end_time - start_time) * 1000,  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                'count': data.get('count', 0),
                'engine': data.get('search_engine', 'unknown')
            }
        else:
            return {
                'time': 0,
                'count': 0,
                'engine': 'error',
                'error': f'HTTP {response.status_code}'
            }
    except Exception as e:
        return {
            'time': 0,
            'count': 0,
            'engine': 'error',
            'error': str(e)
        }

def test_suggestions(query):
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    start_time = time.time()
    
    try:
        url = f'http://localhost:8000/api/products/suggest/?q={query}&limit=5'
        response = requests.get(url, timeout=5)
        
        if response.status_code == 200:
            data = response.json()
            end_time = time.time()
            
            return {
                'time': (end_time - start_time) * 1000,
                'suggestions': len(data.get('suggestions', [])),
                'engine': 'elasticsearch'
            }
        else:
            return {
                'time': 0,
                'suggestions': 0,
                'engine': 'error'
            }
    except Exception as e:
        return {
            'time': 0,
            'suggestions': 0,
            'engine': 'error',
            'error': str(e)
        }

def test_facets():
    """–¢–µ—Å—Ç —Ñ–∞—Å–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    start_time = time.time()
    
    try:
        url = 'http://localhost:8000/api/products/facets/'
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            end_time = time.time()
            
            return {
                'time': (end_time - start_time) * 1000,
                'facets': len(data),
                'engine': 'elasticsearch'
            }
        else:
            return {
                'time': 0,
                'facets': 0,
                'engine': 'error'
            }
    except Exception as e:
        return {
            'time': 0,
            'facets': 0,
            'engine': 'error',
            'error': str(e)
        }

def run_performance_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Elasticsearch vs PostgreSQL")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "iPhone",
        "Samsung",
        "Pro",
        "256GB",
        "black",
        "A",  # condition
    ]
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    test_filters = [
        {'priceRange': '0,50000'},
        {'condition': 'A'},
        {'color': 'black'},
        {'priceRange': '0,50000', 'condition': 'A'},
    ]
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:")
    print("-" * 40)
    
    for query in test_queries:
        print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
        
        # PostgreSQL
        pg_result = test_postgresql_search(query)
        print(f"  PostgreSQL: {pg_result['time']:.2f}ms, {pg_result['count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # Elasticsearch
        es_result = test_elasticsearch_search(query)
        print(f"  Elasticsearch: {es_result['time']:.2f}ms, {es_result['count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if es_result['engine'] != 'error':
            speedup = pg_result['time'] / es_result['time'] if es_result['time'] > 0 else 0
            print(f"  ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    print("-" * 40)
    
    for filters in test_filters:
        print(f"\nüîç –§–∏–ª—å—Ç—Ä—ã: {filters}")
        
        # PostgreSQL
        pg_result = test_postgresql_search("", filters)
        print(f"  PostgreSQL: {pg_result['time']:.2f}ms, {pg_result['count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # Elasticsearch
        es_result = test_elasticsearch_search("", filters)
        print(f"  Elasticsearch: {es_result['time']:.2f}ms, {es_result['count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if es_result['engine'] != 'error':
            speedup = pg_result['time'] / es_result['time'] if es_result['time'] > 0 else 0
            print(f"  ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
    
    print("\nüìä –¢–µ—Å—Ç –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
    print("-" * 40)
    
    for query in ["iph", "sam", "pro"]:
        result = test_suggestions(query)
        print(f"  '{query}': {result['time']:.2f}ms, {result['suggestions']} –ø–æ–¥—Å–∫–∞–∑–æ–∫")
    
    print("\nüìä –¢–µ—Å—Ç —Ñ–∞—Å–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
    print("-" * 40)
    
    result = test_facets()
    print(f"  –§–∞—Å–µ—Ç—ã: {result['time']:.2f}ms, {result['facets']} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    run_performance_tests() 